{:tortoise [[(val :length 150)
             (val :diagonal (* :length (sqrt 2)))
             (lineWidth 2)
             (square :length)
             (turnRight 45)
             (lineColor "blue")
             (forward :diagonal)
             (turnLeft 90)
             (lineColor "red")
             (forward (/ :diagonal 2))
             (turnLeft 90)
             (forward (/ :diagonal 2))
             (turnLeft 90)
             (lineColor "blue")
             (forward :diagonal)]
            [square void
             [length int]
             [(for :i (range 1 5)
                [(forward length)
                 (turnRight 90)])]]]
  :routing [[import a]
            [GET ["guess" :theGuess]
            do (ctrl/handle-guess :theGuess)]
           [GET ["guess"]
            do (ctrl/handle-guess (request/query "theGuess"))]
           [GET []
            do (ctrl/handle-guess nil)]
           [POST ["employee"]
            when (headers {"content-type" "application/json"})
            do (ctrl/add-employee request/json)]
           [POST ["employee"]
            when (headers {"content-type" "application/x-www-form-urlencoded"})
            do (ctrl/add-employee request/params)]
           [GET ["employee" :id]
            do (ctrl/get-employee :id)]
           [GET ["employees"]
            do (ctrl/get-employees)]
           [GET ["employees" :field :value]
            do (ctrl/get-employees-by :field :value)]
           [PUT ["employee" :id]
            when (headers {"content-type" "application/json"})
            do (ctrl/update-employee :id request/json)]
           [PUT ["employee" :id]
            when (headers {"content-type" "application/x-www-form-urlencoded"})
            do (ctrl/update-employee :id request/params)]
           [DELETE ["employee" :id]
            do (ctrl/delete-employee :id)]]
  :template []
  :domain [{org.musicdb
            {Artist {name String
                     albums (* Album)
                     getOevre [Iterable<Track>
                               [(flatten (map tracks albums))]]}
             Album {title String
                    year int
                    getDuration [Duration
                                 [(sum (map seconds tracks))]]
                    tracks [(* Track)
                            {title String
                             seconds int
                             getDuration [Duration
                                          [(new Duration seconds)]]}]}}}]
  :build [[import a]
          [param File :project (new File "example-project")]
          [param File :source (new File :project "src")]
          [param File :target (new File :project "target")]
          [param File :jar (new File :project "result" "foo.jar")]
          [task Zip depends Compile
           [(zip :target :jar)]]
          [task Compile depends Clean
           [(javac
              [(add-source :source)
               (set-destination :target)])]]
          [task Run depends Zip
           [(val :classpath (new Classpath :jar))
            (val :clazz (load-class :classpath "helloworld.HelloWorld"))
            (run-main :clazz)]]
          [task Clean
           [(delete-directory-contents :target)
            (delete :jar)]]]
 :import []
  }