["Five Languages:"
 {
  "HTTP Routing (https://eclipse.org/Xtext/documentation/206_httprouting.html)"
  [[GET ["guess" :theGuess] {} (ctrl/handle-guess :theGuess)]
   [GET ["guess"] {} (ctrl/handle-guess (request/query "theGuess"))]
   [GET [] {} (ctrl/handle-guess nil)]
   [POST ["employee"] {"content-type" "application/json"} (ctrl/add-employee request/json)]
   [POST ["employee"] {"content-type" "application/x-www-form-urlencoded"} (ctrl/add-employee request/params)]
   [GET ["employee" :id] {} (ctrl/get-employee :id)]
   [GET ["employees"] {} (ctrl/get-employees)]
   [GET ["employees" :field :value] {} (ctrl/get-employees-by :field :value)]
   [PUT ["employee" :id] {"content-type" "application/json"} (ctrl/update-employee :id request/json)]
   [PUT ["employee" :id] {"content-type" "application/x-www-form-urlencoded"} (ctrl/update-employee :id request/params)]
   [DELETE ["employee" :id] {} (ctrl/delete-employee :id)]]

  "Domain Definition Language (https://eclipse.org/Xtext/documentation/204_mongodb.html)"
  [
   {
    Artist {
            name [text {:max-size 32}]
            albums */Album
            }
    Album {
           title [text {:max-size 128}]
           year ?/int
           tracks */Track
           }
    Track {
           title [text {:max-size 128}]
           duration duration
           }
    }
   { Student [{
               id int
               first-name [text {:max-size 32}]
               last-name [text {:max-size 32}]
               }
              {:id id}]
    Enrollment [{
                 student $/Student
                 section $/Section
                 }
                {:unique [student section]}]
    Course [{
             code int
             name [text {:max-size 32}]
             description [text {:max-size 8196}]
             credits [int {:min 1}]
             department $/Department
             }
            {:id code}]
    Prerequisite [{
                   course $/Course
                   prerequisite $/Course
                   }
                  {:unique [course prerequisite]}]
    Department [{
                 code int
                 name [text {:max-size 64}]
                 }
                {:id code}]
    Instructor [{
                 id int
                 first-name [text {:max-size 32}]
                 last-name [text {:max-size 32}]
                 department $/Department
                 }
                {:id id}]
    Available-To-Instruct {
                           course $/Course
                           instructor $/Instructor
                           }
    Section [{
              id int
              term [Term {:format ":semester :year"}]
              building $/Building
              time time
              course $/Course
              instructor $/Instructor
              room-number int
              }
             {:id id}]
    Term {
          year [int {:min 1900 :max 2100}]
          semester [text "FALL" "SPRING" "SUMMER"]
          }
    Building {
              name [text {:max-size 128}]
              address Address
              }
    Address {
             street1 [text {:max-size 128}]
             street2 [?/text {:max-size 32}]
             city [text {:max-size 128}]
             state [text "WI" "MN" "AK"]
             zip int
             }
    }
   ]

  "Query Language"
  [{Select * From quantity_limit}
   {Select {list_count (count *)} From form.formulary_load Where (= file_load_id :file-load-id)}
   { Select w/*
    From [l/form.formulary_load
          Inner-Join w/form.formulary_webdav (= l/formulary_load_id w/formulary_load_id)]
    Where (and (= l/management_status "A")
            (<= l/effective_date :effective-date)
            (= w/version :version)
            (= w/rollup_drug_db :rollup-drug-db)
            (= l/publisher :publisher)
            (= l/list_id :list-id)
            (= l/type :type)
            (is-null l/sub_type))
    Order-By [{l/effective_date desc}]}
   {Select *
    From form.rfs_load
    Where (or (modified_date > :min-mod-date) (and (modified_date = :mod-date) (rfs_load_id > :rfs-load-id)))
    Order-By [modified_date rfs_load_id]
    Limit :limit}
   ]

  "Build Language (https://eclipse.org/Xtext/documentation/203_builddsl.html)"
  [
   (!= :project (file 'example-project'))
   (!= :source (file :project 'src'))
   (!= :target (file :project 'target'))
   (!= :jar (file :project 'result' 'foo.jar'))
   {
    Zip [[Compile]
         (zip :target :jar)
         ]
    Compile [[Clean]
             (javac (list :source) :target)
             ]
    Run [[Zip]
         (!= :classpath (new-classpath :jar))
         (!= :class (load-class :classpath "helloworld.HelloWorld"))
         (run-main :class)
         ]
    Clean [
           (delete-contents :target)
           (delete :jar)
           ]
    }
   ]

  "Tortoise (https://eclipse.org/Xtext/documentation/208_tortoise.html)"
  [
   {square [[:length]
            [(for :x (1 ... 4)
               (forward :length)
               (turn-right 90))]]}
   [(!= :length 150)
    (!= :diagonal (:length * (sqrt 2)))
    (!= :line-width 2)
    (square :length)
    (turn-right 45)
    (!= :line-color "blue")
    (forward :diagonal)
    (turn-left 90)
    (!= :line-color "red")
    (forward (:diagonal / 2))
    (turn-left 90)
    (forward (:diagonal / 2))
    (turn-left 90)
    (!= :line-color "blue")
    (forward :diagonal)]]

  "Template (https://eclipse.org/Xtext/documentation/207_template.html)"
  [html {lang "en"}
   [head
    [meta {charset "utf-8"}]
    [title :title]
    [meta {name "viewport" content "width=device-width, initial-scale=1.0"}]
    [meta {name "description" content :description}]
    [meta {name "author" content :author}]]
   [body
    ({:sections :element}
      [div {class "section"}
       [h1 :element/title]
       ((not-nil? :element/description)
         [p :element/description])])]]

  "Syntax/Grammar"
  [{name "Domain Definition"
    syntax/grammar {map/root {symbol/class-name #{map/class vector/class-and-constraints}}
                    vector/class-and-constraints (map/class map/class-constraints)
                    map/class {symbol/field-name #{symbol/type vector/field-constraints}}
                    vector/field-constraints (symbol/type #{map/constraint-map (string/enum-option [& string/enum-option])})
                    map/constraint-map {[:max-size] int/max-size
                                        [:min] #{int/min-int}
                                        [:max] #{int/max-int}
                                        [:max] string/string-format}
                    map/class-constraints {[:id] symbol/id
                                           [:unique] vector/unique-fields}
                    vector/unique-fields (symbol/unique-field [& symbol/unique-field])}}
   {name "HTTP Routing"
    syntax/grammar {vector/root (vector/routing [& vector/routing])
                    vector/routing (symbol/method vector/path map/headers list/control-expression)
                    symbol/method #{GET POST PUT DELETE PATCH}
                    vector/path [& #{string/step keyword/path-var}]
                    map/headers {string/header-name string/header-value}
                    list/control-expression (symbol/func-name [& #{list/control-expression symbol/request-var keyword/path-var}])}}
   {name "SQL Wrapper"
    syntax/grammar {map/root {Select */select-clause
                              [From] */from-clause
                              [Where] list/where-clause
                              [Order-By] */order-by-clause
                              [Limit] #{int/limit keyword/var}}
                    */select-clause #{vector/column-list */column-def *}
                    */column-def #{map/complex-column symbol/column}
                    vector/column-list (*/column-def [& */column-def])
                    map/complex-column {symbol/column-alias #{symbol/column list/column-expression}
                                        constraint/count 1}
                    list/column-expression list/expression
                    list/expression (symbol/operator [& #{symbol/column keyword/var list/expression}])
                    */from-clause #{symbol/table vector/join}
                    vector/join (symbol/table [& #{Inner-Join Left-Outer-Join Right-Outer-Join} symbol/table list/on-expression])
                    list/on-expression list/expression
                    list/where-clause list/expression
                    */order-by-clause #{*/sort-column vector/sort-list}
                    vector/sort-list (*/sort-column [& */sort-column])
                    */sort-column #{symbol/column map/directed-column}
                    map/directed-column {symbol/column #{asc desc}
                                         constraint/count 1}
                    }}
   {name "XML Short"
    syntax/grammar {vector/node (symbol/tag-name [map/attrs] [& #{vector/node symbol/tag-name string/value}])
                    map/attrs {map/attr-name literal/attr-value}}}
   ]
  }
 ]
